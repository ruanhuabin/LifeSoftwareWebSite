package cn.edu.tsinghua.action;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.struts2.ServletActionContext;

import cn.edu.tsinghua.entity.Admin;
import cn.edu.tsinghua.entity.Post;
import cn.edu.tsinghua.service.AdminDAO;
import cn.edu.tsinghua.service.PostDAO;
import cn.edu.tsinghua.serviceimpl.AdminDAOImpl;
import cn.edu.tsinghua.serviceimpl.PostDAOImpl;


public class AdminAction extends SuperAction {
	
	private static final Logger logger = Logger.getLogger("AdminLogger");
	
	private String yourFileFileName;
	private String yourFileContentType;
	private File yourFile;
	private String uploadDir;	

	

	public String getYourFileFileName() {
		return yourFileFileName;
	}
	public void setYourFileFileName(String yourFileFileName) {
		this.yourFileFileName = yourFileFileName;
	}
	public String getYourFileContentType() {
		return yourFileContentType;
	}
	public void setYourFileContentType(String yourFileContentType) {
		this.yourFileContentType = yourFileContentType;
	}
	public File getYourFile() {
		return yourFile;
	}
	public void setYourFile(File yourFile) {
		this.yourFile = yourFile;
	}
	public String getUploadDir() {
		return uploadDir;
	}

	public void setUploadDir(String uploadDir) {
		this.uploadDir = uploadDir;
	}
	
	public String upload() {

		logger.info("filename = " + this.yourFileFileName);
		logger.info("filetype = " + this.yourFileContentType);

		String path = ServletActionContext.getServletContext().getRealPath(
				uploadDir);

		logger.info("path = " + path);

		File dir = new File(path);
		if (!dir.exists())
			dir.mkdir();

		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;

		String newFileName;
		long now = new Date().getTime();

		newFileName = Long.toString(now) + "_" + yourFileFileName;
		logger.info("new File Name = " + newFileName);

		try {
			FileInputStream fis = new FileInputStream(yourFile);
			bis = new BufferedInputStream(fis);

			FileOutputStream fos = new FileOutputStream(new File(dir,
					newFileName));

			bos = new BufferedOutputStream(fos);

			byte[] buf = new byte[4096];

			int len = -1;

			while ((len = bis.read(buf)) != -1) {
				bos.write(buf, 0, len);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {

				if (null != bis)
					bis.close();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}

			try {

				if (null != bos)
					bos.close();
			} catch (Exception e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}

		return "software_upload_success";
	}
	
	
	public String postSoftware()
	{
		logger.info("upload filen name : " + this.yourFileFileName);
		logger.info("upload file type = " + this.yourFileContentType);

		String path = ServletActionContext.getServletContext().getRealPath(uploadDir);

		logger.info("file will be saved to path: " + path);

		File dir = new File(path);
		if (!dir.exists())
		{
			dir.mkdir();
		}

		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;

		String newFileName;
		long now = new Date().getTime();

		newFileName = Long.toString(now) + "_" + yourFileFileName;
		logger.info("rename uploaded file to: " + newFileName);
		
		String title = request.getParameter("title");
		String description = request.getParameter("description");
		String softwareURI = "/CryoEM/post/download.action?f=" + newFileName;
		
		logger.info("post title: " + title);
		logger.info("post description: " + description);

		try {
			FileInputStream fis = new FileInputStream(yourFile);
			bis = new BufferedInputStream(fis);
			FileOutputStream fos = new FileOutputStream(new File(dir, newFileName));

			bos = new BufferedOutputStream(fos);

			byte[] buf = new byte[4096];

			int len = -1;

			while ((len = bis.read(buf)) != -1) {
				bos.write(buf, 0, len);
			}

		} catch (Exception e)
		{
			e.printStackTrace();
			return "software_post_error";
					
		} finally
		{
			try {

				if (null != bis)
					bis.close();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}

			try {

				if (null != bos)
					bos.close();
			} catch (Exception e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		
		Post p = new Post();
		p.setTitle(title);
		p.setDescription(description);
		p.setSoftwareURI(softwareURI);
		PostDAO pDAO = new PostDAOImpl();
		pDAO.addPost(p);
		
		return "software_post_success";
	}
	
	
	public String toAdmin()
	{	
		
		return "load_admin_page";
	}
	
	public String adminLogin()
	{
		
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		
		Admin admin = new Admin(username, password);
		AdminDAO adminDAO = new AdminDAOImpl();
		
		boolean result = adminDAO.isAdminValid(admin);
		
		if(result)
		{
			session.setAttribute("adminInfo", admin);
			return "load_admin_page"
		}
		
		
		
		return "admin_login_success";
	}
	
	
	
	

	
}
